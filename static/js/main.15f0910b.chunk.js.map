{"version":3,"sources":["marketContext.js","myHoldings.js","TotalCard.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["MarketContext","React","createContext","MarketProvider","children","useState","data","setData","useEffect","conn","WebSocket","onopen","send","JSON","stringify","method","params","id","onmessage","evt","streamData","parse","s","oldData","Provider","value","myHoldings","BNBUSDT","BANDUSDT","RSRUSDT","MIRUSDT","SOLUSDT","THETAUSDT","OCEANUSDT","XTZUSDT","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","SimpleCard","props","classes","Card","className","CardContent","Typography","variant","component","color","total","toFixed","table","BasicTable","marketData","context","useContext","undefined","Error","useMarket","rows","Object","keys","map","symbol","date","lastPrice","parseFloat","c","totalHolding","time","createData","Date","E","getHours","getMinutes","getSeconds","holdingPrices","totalHoldingPrice","length","reduce","acc","currentValue","TableContainer","Paper","Table","aria-label","size","TableHead","TableRow","TableCell","align","TableBody","row","scope","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15f0910b.chunk.js","sourcesContent":["import React from \"react\";\n\n// Example data state\n// const data = {\n//   BTCUSDT: {\n//       e: \"24hrTicker\", // Event type\n//       E: 123456789, // Event time\n//       s: \"BNBBTC\", // Symbol\n//       p: \"0.0015\", // Price change\n//       P: \"250.00\", // Price change percent\n//       w: \"0.0018\", // Weighted average price\n//       x: \"0.0009\", // First trade(F)-1 price (first trade before the 24hr rolling window)\n//       c: \"0.0025\", // Last price\n//       Q: \"10\", // Last quantity\n//       b: \"0.0024\", // Best bid price\n//       B: \"10\", // Best bid quantity\n//       a: \"0.0026\", // Best ask price\n//       A: \"100\", // Best ask quantity\n//       o: \"0.0010\", // Open price\n//       h: \"0.0025\", // High price\n//       l: \"0.0010\", // Low price\n//       v: \"10000\", // Total traded base asset volume\n//       q: \"18\", // Total traded quote asset volume\n//       O: 0, // Statistics open time\n//       C: 86400000, // Statistics close time\n//       F: 0, // First trade ID\n//       L: 18150, // Last trade Id\n//       n: 18151, // Total number of trades\n//   },\n// };\n\nconst MarketContext = React.createContext();\n\nexport function MarketProvider({ children }) {\n  const [data, setData] = React.useState({});\n\n  React.useEffect(() => {\n    const streamUrl = \"wss://stream.binance.com:9443/ws\";\n    const conn = new WebSocket(streamUrl);\n    conn.onopen = function () {\n      conn.send(\n        JSON.stringify({\n          method: \"SUBSCRIBE\",\n          params: [\n            \"solusdt@ticker\",\n            \"rsrusdt@ticker\",\n            \"oceanusdt@ticker\",\n            \"mirusdt@ticker\",\n            \"1inchusdt@ticker\",\n            \"bandusdt@ticker\",\n            \"bnbusdt@ticker\",\n            \"thetausdt@ticker\",\n            \"xtzusdt@ticker\",\n          ],\n          id: 1,\n        })\n      );\n    };\n\n    conn.onmessage = function (evt) {\n      if (evt.data) {\n        const streamData = JSON.parse(evt.data);\n        if (streamData.s) {\n          setData((oldData) => {\n            let data = { ...oldData };\n            data[streamData.s] = streamData;\n            return data;\n          });\n        }\n      }\n    };\n\n    return function unsubscribe() {\n      conn.send(\n        JSON.stringify({\n          method: \"UNSUBSCRIBE\",\n          params: [\"btcusdt@ticker\"],\n          id: 1,\n        })\n      );\n    };\n  }, []);\n\n  return (\n    <MarketContext.Provider value={data}>{children}</MarketContext.Provider>\n  );\n}\n\nexport function useMarket() {\n  const context = React.useContext(MarketContext);\n  if (context === undefined) {\n    throw new Error(\"useMarket must be used within a MarketProvider\");\n  }\n  return context;\n}\n","export const myHoldings = {\n  BNBUSDT: 3.51,\n  BANDUSDT: 680.01,\n  RSRUSDT: 540000,\n  MIRUSDT: 1921.705,\n  \"1INCHUSDT\": 5753.45,\n  SOLUSDT: 483.19,\n  THETAUSDT: 988.55,\n  OCEANUSDT: 8663,\n  XTZUSDT: 756,\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport function SimpleCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          Total\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {props.total.toFixed(2)}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useMarket } from \"./marketContext\";\nimport { myHoldings } from \"./myHoldings\";\nimport { SimpleCard } from \"./TotalCard\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction getTime(date) {\n  return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n}\n\nfunction createData(symbol, time, lastPrice, totalHolding) {\n  return { symbol, time, lastPrice, totalHolding };\n}\n\nexport default function BasicTable() {\n  const classes = useStyles();\n\n  const marketData = useMarket();\n\n  const rows = Object.keys(marketData).map((symbol) => {\n    const lastPrice = parseFloat(marketData[symbol].c);\n    const totalHolding = lastPrice * myHoldings[symbol];\n    return createData(\n      marketData[symbol].s,\n      getTime(new Date(marketData[symbol].E)),\n      lastPrice,\n      totalHolding.toFixed(2)\n    );\n  });\n\n  const holdingPrices = Object.keys(marketData).map((symbol) => {\n    const lastPrice = parseFloat(marketData[symbol].c);\n    const totalHolding = lastPrice * myHoldings[symbol];\n    return totalHolding;\n  });\n\n  const totalHoldingPrice =\n    holdingPrices.length &&\n    holdingPrices.reduce((acc, currentValue) => {\n      return currentValue + acc;\n    });\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Symbol</TableCell>\n            <TableCell align=\"right\">Last Price</TableCell>\n            <TableCell align=\"right\">Total Holding</TableCell>\n            <TableCell align=\"right\">Time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.symbol}\n              </TableCell>\n              <TableCell align=\"right\">{row.lastPrice}</TableCell>\n              <TableCell align=\"right\">{row.totalHolding}</TableCell>\n              <TableCell align=\"right\">{row.time}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <SimpleCard total={totalHoldingPrice} />\n    </TableContainer>\n  );\n}\n","import { MarketProvider } from \"./marketContext\";\nimport BasicTable from \"./Table\";\n\nfunction App() {\n  return (\n    <MarketProvider>\n      <BasicTable />\n    </MarketProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}